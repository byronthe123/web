import * as yup from 'yup';
import moment from 'moment';

export const importItemSchema = yup.object().shape({
    importData: yup.object().required().shape({
        s_unit: yup.string().required(),
        s_awb_type: yup.string().required(),
        s_status: yup.string().required(),
        s_mawb: yup.string().required(),
        s_hawb: yup.string().notRequired().nullable(),
        s_transaction_id: yup.string().required(),
        i_pieces: yup.number().required(),
        i_pieces_auto: yup.number().required(),
        f_weight: yup.number().required(),
        f_weight_auto: yup.number().required(),
        d_last_arrival_date: yup.date().nullable().transform((curr, orig) => orig === '' ? null : curr),
        f_charge_isc: yup.number().required(),
        f_charge_isc_auto: yup.number().required(),
        f_charge_storage: yup.number().nullable().transform((value, originalValue) => (String(originalValue).trim() === '' ? null : value)),
        f_charge_storage_auto: yup.number().nullable().transform((value, originalValue) => (String(originalValue).trim() === '' ? null : value)),
        f_charge_others: yup.number().required(),
        f_charges_total: yup.number().required(),
        f_paid_online: yup.number().required(),
        f_paid_online_auto: yup.number().required(),
        f_paid_check: yup.number().required(),
        f_paid_cash: yup.number().required(),
        f_paid_total: yup.number().required(),
        b_cargo_located: yup.boolean().required(),
        s_customs_release: yup.string().required(),
        f_balance_total: yup.number().required(),
        f_balance_offset: yup.number().notRequired().nullable(),
        s_balance_approval_notes: yup.string().notRequired().nullable(),
        s_driver_name: yup.string().required(),
        s_driver_id_type: yup.string().required(),
        t_driver_id_expiration: yup.date().required().min(moment().format('MM/DD/YYYY'), 'Driver ID Expiration Date is invalid'),
        s_driver_id_number: yup.string().required(),
        b_driver_id_match_photo: yup.boolean().required(),
        s_driver_company: yup.string().required(),
        t_kiosk_submittedtime: yup.date().required(),
        s_counter_assigned_agent: yup.string().required(),
        t_counter_assigned_start: yup.date().required(),
        s_counter_by: yup.string().required(),
        t_counter_start_time: yup.date().required(),
        t_counter_endtime: yup.date().required(),
        t_created: yup.date().required(),
        s_created_by: yup.string().required(),
        t_modified: yup.date().required(),
        s_modified_by: yup.string().required(),
        s_notes: yup.string().notRequired().nullable(),
        b_counter_reject: yup.boolean().required(),
        s_counter_reject_agent: yup.string().notRequired().nullable(),
        t_counter_reject_time: yup.string().notRequired().nullable(),
        s_counter_reject_reason: yup.string().notRequired().nullable(),
        b_user_modified_auto: yup.boolean().required(),
        d_last_arrival_date_auto: yup.date().nullable().transform((curr, orig) => orig === '' ? null : curr),
        s_mawb_id: yup.string().required(),
    }),
    queueData: yup.object().shape({
        id: yup.number().required(),
        t_counter_start: yup.date().required(),
        t_counter_end: yup.date().required(),
        s_status: yup.string().required(),
        b_counter_reject: yup.boolean().required(),
        s_counter_reject_agent: yup.string().notRequired().nullable(),
        t_counter_reject_time: yup.date().notRequired().nullable(),
        s_counter_reject_reason: yup.string().notRequired().nullable(),
        s_counter_ownership_agent: yup.string().required(),
        s_transaction_id: yup.string().required()
    }),
    files: yup.array(),
    processedPayments: yup.array(),
    processedCsIds: yup.array()
});

